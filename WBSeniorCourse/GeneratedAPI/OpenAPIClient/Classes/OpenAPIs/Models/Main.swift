//
// Main.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Main: Codable, JSONEncodable, Hashable {

    /** Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var temp: Double?
    /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */
    public var pressure: Int?
    /** Humidity, % */
    public var humidity: Int?
    /** Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var tempMin: Double?
    /** Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */
    public var tempMax: Double?
    /** Atmospheric pressure on the sea level, hPa */
    public var seaLevel: Double?
    /** Atmospheric pressure on the ground level, hPa */
    public var grndLevel: Double?

    public init(temp: Double? = nil, pressure: Int? = nil, humidity: Int? = nil, tempMin: Double? = nil, tempMax: Double? = nil, seaLevel: Double? = nil, grndLevel: Double? = nil) {
        self.temp = temp
        self.pressure = pressure
        self.humidity = humidity
        self.tempMin = tempMin
        self.tempMax = tempMax
        self.seaLevel = seaLevel
        self.grndLevel = grndLevel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case temp
        case pressure
        case humidity
        case tempMin = "temp_min"
        case tempMax = "temp_max"
        case seaLevel = "sea_level"
        case grndLevel = "grnd_level"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(temp, forKey: .temp)
        try container.encodeIfPresent(pressure, forKey: .pressure)
        try container.encodeIfPresent(humidity, forKey: .humidity)
        try container.encodeIfPresent(tempMin, forKey: .tempMin)
        try container.encodeIfPresent(tempMax, forKey: .tempMax)
        try container.encodeIfPresent(seaLevel, forKey: .seaLevel)
        try container.encodeIfPresent(grndLevel, forKey: .grndLevel)
    }
}

